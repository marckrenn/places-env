name: Test

on:
  workflow_call:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show initial environment
        run: |
          echo "Current Directory:"
          pwd
          echo "Listing files in workspace:"
          ls -R
          echo "Environment Variables:"
          env

      - name: Get Python version from pyproject.toml
        run: |
          PYTHON_VERSION=$(grep "requires-python" pyproject.toml | sed -E 's/.*>=([0-9]+\.[0-9]+).*/\1/')
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.uv
          key: uv-dependencies-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-dependencies-${{ runner.os }}-

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Sync dependencies
        run: uv sync --all-extras --dev

      - name: Build package
        run: uv build

      - name: Inspect dist directory
        run: |
          echo "Listing dist contents:"
          ls -lah dist

      - name: Install places
        run: uv pip install dist/*.whl

      - name: Verify installation and dependencies
        run: |
          echo "Installed packages:"
          uv pip list
          echo "Checking if 'places' is on PATH:"
          which places || echo "'places' command not found"

      - name: Set directory permissions
        run: chmod -R 777 .

      - name: Check environment before tests
        run: |
          echo "Current Directory before tests:"
          pwd
          echo "Listing files again before tests:"
          ls -R

      - name: Run Tests (attempt 1 - using CLI directly)
        run: uv run places run test -a

      - name: Run Tests (attempt 2 - using Python module, if needed)
        if: always() # This will run even if the previous step fails, for debugging
        run: uv python -m places run test -a